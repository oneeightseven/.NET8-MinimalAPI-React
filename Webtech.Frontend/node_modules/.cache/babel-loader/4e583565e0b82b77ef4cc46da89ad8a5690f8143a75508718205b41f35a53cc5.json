{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\n// it's a very new API right now.\n// Not exported from index.\n/** @private */\nexport class AbortController {\n  constructor() {\n    this._isAborted = false;\n    this.onabort = null;\n  }\n  abort() {\n    if (!this._isAborted) {\n      this._isAborted = true;\n      if (this.onabort) {\n        this.onabort();\n      }\n    }\n  }\n  get signal() {\n    return this;\n  }\n  get aborted() {\n    return this._isAborted;\n  }\n}","map":{"version":3,"names":["AbortController","constructor","_isAborted","onabort","abort","signal","aborted"],"sources":["/home/oneeightseven/webtech/node_modules/@microsoft/signalr/src/AbortController.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private _isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort(): void {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this._isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA,OAAM,MAAOA,eAAe;EAA5BC,YAAA;IACY,KAAAC,UAAU,GAAY,KAAK;IAC5B,KAAAC,OAAO,GAAwB,IAAI;EAkB9C;EAhBWC,KAAKA,CAAA;IACR,IAAI,CAAC,IAAI,CAACF,UAAU,EAAE;MAClB,IAAI,CAACA,UAAU,GAAG,IAAI;MACtB,IAAI,IAAI,CAACC,OAAO,EAAE;QACd,IAAI,CAACA,OAAO,EAAE;;;EAG1B;EAEA,IAAIE,MAAMA,CAAA;IACN,OAAO,IAAI;EACf;EAEA,IAAIC,OAAOA,CAAA;IACP,OAAO,IAAI,CAACJ,UAAU;EAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}