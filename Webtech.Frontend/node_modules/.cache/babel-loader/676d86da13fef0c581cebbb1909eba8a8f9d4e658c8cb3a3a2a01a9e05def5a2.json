{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { Platform } from \"./Utils\";\n/** @private */\nexport function configureFetch(obj) {\n  // Node added a fetch implementation to the global scope starting in v18.\n  // We need to add a cookie jar in node to be able to share cookies with WebSocket\n  if (typeof fetch === \"undefined\" || Platform.isNode) {\n    // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    obj._jar = new (require(\"tough-cookie\").CookieJar)();\n    if (typeof fetch === \"undefined\") {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      obj._fetchType = require(\"node-fetch\");\n    } else {\n      // Use fetch from Node if available\n      obj._fetchType = fetch;\n    }\n    // node-fetch doesn't have a nice API for getting and setting cookies\n    // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    obj._fetchType = require(\"fetch-cookie\")(obj._fetchType, obj._jar);\n    return true;\n  }\n  return false;\n}\n/** @private */\nexport function configureAbortController(obj) {\n  if (typeof AbortController === \"undefined\") {\n    // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\n    obj._abortControllerType = require(\"abort-controller\");\n    return true;\n  }\n  return false;\n}\n/** @private */\nexport function getWS() {\n  return require(\"ws\");\n}\n/** @private */\nexport function getEventSource() {\n  return require(\"eventsource\");\n}","map":{"version":3,"names":["Platform","configureFetch","obj","fetch","isNode","_jar","require","CookieJar","_fetchType","configureAbortController","AbortController","_abortControllerType","getWS","getEventSource"],"sources":["/home/oneeightseven/Рабочий стол/WebTech/Webtech.Frontend/node_modules/@microsoft/signalr/src/DynamicImports.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport { CookieJar } from \"@types/tough-cookie\";\r\nimport { Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport function configureFetch(obj: { _fetchType?: (input: RequestInfo, init?: RequestInit) => Promise<Response>,\r\n                               _jar?: CookieJar }): boolean\r\n{\r\n    // Node added a fetch implementation to the global scope starting in v18.\r\n    // We need to add a cookie jar in node to be able to share cookies with WebSocket\r\n    if (typeof fetch === \"undefined\" || Platform.isNode) {\r\n        // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        obj._jar = new (require(\"tough-cookie\")).CookieJar();\r\n\r\n        if (typeof fetch === \"undefined\") {\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            obj._fetchType = require(\"node-fetch\");\r\n        } else {\r\n            // Use fetch from Node if available\r\n            obj._fetchType = fetch;\r\n        }\r\n\r\n        // node-fetch doesn't have a nice API for getting and setting cookies\r\n        // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        obj._fetchType = require(\"fetch-cookie\")(obj._fetchType, obj._jar);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/** @private */\r\nexport function configureAbortController(obj: { _abortControllerType: { prototype: AbortController, new(): AbortController } }): boolean {\r\n    if (typeof AbortController === \"undefined\") {\r\n        // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n        obj._abortControllerType = require(\"abort-controller\");\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/** @private */\r\nexport function getWS(): any {\r\n    return require(\"ws\");\r\n}\r\n\r\n/** @private */\r\nexport function getEventSource(): any {\r\n    return require(\"eventsource\");\r\n}"],"mappings":"AAAA;AACA;AAIA,SAASA,QAAQ,QAAQ,SAAS;AAElC;AACA,OAAM,SAAUC,cAAcA,CAACC,GACkB;EAE7C;EACA;EACA,IAAI,OAAOC,KAAK,KAAK,WAAW,IAAIH,QAAQ,CAACI,MAAM,EAAE;IACjD;IACA;IACAF,GAAG,CAACG,IAAI,GAAG,KAAKC,OAAO,CAAC,cAAc,CAAC,CAAEC,SAAS,GAAE;IAEpD,IAAI,OAAOJ,KAAK,KAAK,WAAW,EAAE;MAC9B;MACAD,GAAG,CAACM,UAAU,GAAGF,OAAO,CAAC,YAAY,CAAC;KACzC,MAAM;MACH;MACAJ,GAAG,CAACM,UAAU,GAAGL,KAAK;;IAG1B;IACA;IACA;IACAD,GAAG,CAACM,UAAU,GAAGF,OAAO,CAAC,cAAc,CAAC,CAACJ,GAAG,CAACM,UAAU,EAAEN,GAAG,CAACG,IAAI,CAAC;IAClE,OAAO,IAAI;;EAEf,OAAO,KAAK;AAChB;AAEA;AACA,OAAM,SAAUI,wBAAwBA,CAACP,GAAqF;EAC1H,IAAI,OAAOQ,eAAe,KAAK,WAAW,EAAE;IACxC;IACAR,GAAG,CAACS,oBAAoB,GAAGL,OAAO,CAAC,kBAAkB,CAAC;IACtD,OAAO,IAAI;;EAEf,OAAO,KAAK;AAChB;AAEA;AACA,OAAM,SAAUM,KAAKA,CAAA;EACjB,OAAON,OAAO,CAAC,IAAI,CAAC;AACxB;AAEA;AACA,OAAM,SAAUO,cAAcA,CAAA;EAC1B,OAAOP,OAAO,CAAC,aAAa,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}