{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { SubjectSubscription } from \"./Utils\";\n/** Stream implementation to stream items to the server. */\nexport class Subject {\n  constructor() {\n    this.observers = [];\n  }\n  next(item) {\n    for (const observer of this.observers) {\n      observer.next(item);\n    }\n  }\n  error(err) {\n    for (const observer of this.observers) {\n      if (observer.error) {\n        observer.error(err);\n      }\n    }\n  }\n  complete() {\n    for (const observer of this.observers) {\n      if (observer.complete) {\n        observer.complete();\n      }\n    }\n  }\n  subscribe(observer) {\n    this.observers.push(observer);\n    return new SubjectSubscription(this, observer);\n  }\n}","map":{"version":3,"names":["SubjectSubscription","Subject","constructor","observers","next","item","observer","error","err","complete","subscribe","push"],"sources":["/home/oneeightseven/webtech/node_modules/@microsoft/signalr/src/Subject.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: IStreamSubscriber<T>[];\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AAGA,SAASA,mBAAmB,QAAQ,SAAS;AAE7C;AACA,OAAM,MAAOC,OAAO;EAOhBC,YAAA;IACI,IAAI,CAACC,SAAS,GAAG,EAAE;EACvB;EAEOC,IAAIA,CAACC,IAAO;IACf,KAAK,MAAMC,QAAQ,IAAI,IAAI,CAACH,SAAS,EAAE;MACnCG,QAAQ,CAACF,IAAI,CAACC,IAAI,CAAC;;EAE3B;EAEOE,KAAKA,CAACC,GAAQ;IACjB,KAAK,MAAMF,QAAQ,IAAI,IAAI,CAACH,SAAS,EAAE;MACnC,IAAIG,QAAQ,CAACC,KAAK,EAAE;QAChBD,QAAQ,CAACC,KAAK,CAACC,GAAG,CAAC;;;EAG/B;EAEOC,QAAQA,CAAA;IACX,KAAK,MAAMH,QAAQ,IAAI,IAAI,CAACH,SAAS,EAAE;MACnC,IAAIG,QAAQ,CAACG,QAAQ,EAAE;QACnBH,QAAQ,CAACG,QAAQ,EAAE;;;EAG/B;EAEOC,SAASA,CAACJ,QAA8B;IAC3C,IAAI,CAACH,SAAS,CAACQ,IAAI,CAACL,QAAQ,CAAC;IAC7B,OAAO,IAAIN,mBAAmB,CAAC,IAAI,EAAEM,QAAQ,CAAC;EAClD"},"metadata":{},"sourceType":"module","externalDependencies":[]}