{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\nimport { LogLevel } from \"./ILogger\";\nimport { Platform, getGlobalThis, isArrayBuffer } from \"./Utils\";\nimport { configureAbortController, configureFetch } from \"./DynamicImports\";\nexport class FetchHttpClient extends HttpClient {\n  constructor(logger) {\n    super();\n    this._logger = logger;\n    // This is how you do \"reference\" arguments\n    const fetchObj = {\n      _fetchType: undefined,\n      _jar: undefined\n    };\n    if (configureFetch(fetchObj)) {\n      this._fetchType = fetchObj._fetchType;\n      this._jar = fetchObj._jar;\n    } else {\n      this._fetchType = fetch.bind(getGlobalThis());\n    }\n    this._abortControllerType = AbortController;\n    const abortObj = {\n      _abortControllerType: this._abortControllerType\n    };\n    if (configureAbortController(abortObj)) {\n      this._abortControllerType = abortObj._abortControllerType;\n    }\n  }\n  /** @inheritDoc */\n  async send(request) {\n    // Check that abort was not signaled before calling send\n    if (request.abortSignal && request.abortSignal.aborted) {\n      throw new AbortError();\n    }\n    if (!request.method) {\n      throw new Error(\"No method defined.\");\n    }\n    if (!request.url) {\n      throw new Error(\"No url defined.\");\n    }\n    const abortController = new this._abortControllerType();\n    let error;\n    // Hook our abortSignal into the abort controller\n    if (request.abortSignal) {\n      request.abortSignal.onabort = () => {\n        abortController.abort();\n        error = new AbortError();\n      };\n    }\n    // If a timeout has been passed in, setup a timeout to call abort\n    // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\n    let timeoutId = null;\n    if (request.timeout) {\n      const msTimeout = request.timeout;\n      timeoutId = setTimeout(() => {\n        abortController.abort();\n        this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\n        error = new TimeoutError();\n      }, msTimeout);\n    }\n    if (request.content === \"\") {\n      request.content = undefined;\n    }\n    if (request.content) {\n      // Explicitly setting the Content-Type header for React Native on Android platform.\n      request.headers = request.headers || {};\n      if (isArrayBuffer(request.content)) {\n        request.headers[\"Content-Type\"] = \"application/octet-stream\";\n      } else {\n        request.headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\n      }\n    }\n    let response;\n    try {\n      response = await this._fetchType(request.url, {\n        body: request.content,\n        cache: \"no-cache\",\n        credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\n        headers: {\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          ...request.headers\n        },\n        method: request.method,\n        mode: \"cors\",\n        redirect: \"follow\",\n        signal: abortController.signal\n      });\n    } catch (e) {\n      if (error) {\n        throw error;\n      }\n      this._logger.log(LogLevel.Warning, `Error from HTTP request. ${e}.`);\n      throw e;\n    } finally {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      if (request.abortSignal) {\n        request.abortSignal.onabort = null;\n      }\n    }\n    if (!response.ok) {\n      const errorMessage = await deserializeContent(response, \"text\");\n      throw new HttpError(errorMessage || response.statusText, response.status);\n    }\n    const content = deserializeContent(response, request.responseType);\n    const payload = await content;\n    return new HttpResponse(response.status, response.statusText, payload);\n  }\n  getCookieString(url) {\n    let cookies = \"\";\n    if (Platform.isNode && this._jar) {\n      // @ts-ignore: unused variable\n      this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\n    }\n    return cookies;\n  }\n}\nfunction deserializeContent(response, responseType) {\n  let content;\n  switch (responseType) {\n    case \"arraybuffer\":\n      content = response.arrayBuffer();\n      break;\n    case \"text\":\n      content = response.text();\n      break;\n    case \"blob\":\n    case \"document\":\n    case \"json\":\n      throw new Error(`${responseType} is not supported.`);\n    default:\n      content = response.text();\n      break;\n  }\n  return content;\n}","map":{"version":3,"names":["AbortError","HttpError","TimeoutError","HttpClient","HttpResponse","LogLevel","Platform","getGlobalThis","isArrayBuffer","configureAbortController","configureFetch","FetchHttpClient","constructor","logger","_logger","fetchObj","_fetchType","undefined","_jar","fetch","bind","_abortControllerType","AbortController","abortObj","send","request","abortSignal","aborted","method","Error","url","abortController","error","onabort","abort","timeoutId","timeout","msTimeout","setTimeout","log","Warning","content","headers","response","body","cache","credentials","withCredentials","mode","redirect","signal","e","clearTimeout","ok","errorMessage","deserializeContent","statusText","status","responseType","payload","getCookieString","cookies","isNode","getCookies","c","join","arrayBuffer","text"],"sources":["/home/oneeightseven/webtech/node_modules/@microsoft/signalr/src/FetchHttpClient.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport { CookieJar } from \"@types/tough-cookie\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis, isArrayBuffer } from \"./Utils\";\r\nimport { configureAbortController, configureFetch } from \"./DynamicImports\";\r\n\r\nexport class FetchHttpClient extends HttpClient {\r\n    private readonly _abortControllerType: { prototype: AbortController, new(): AbortController };\r\n    private readonly _fetchType: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n    private readonly _jar?: CookieJar;\r\n\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n\r\n        // This is how you do \"reference\" arguments\r\n        const fetchObj = { _fetchType: undefined, _jar: undefined };\r\n        if (configureFetch(fetchObj)) {\r\n            this._fetchType = fetchObj._fetchType!;\r\n            this._jar = fetchObj._jar;\r\n        } else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n\r\n        this._abortControllerType = AbortController;\r\n        const abortObj = { _abortControllerType: this._abortControllerType };\r\n        if (configureAbortController(abortObj)) {\r\n            this._abortControllerType = abortObj._abortControllerType;\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n\r\n        const abortController = new this._abortControllerType();\r\n\r\n        let error: any;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId: any = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout!;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n\r\n        if (request.content === \"\") {\r\n            request.content = undefined;\r\n        }\r\n        if (request.content) {\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            request.headers = request.headers || {};\r\n            if (isArrayBuffer(request.content)) {\r\n                request.headers[\"Content-Type\"] = \"application/octet-stream\";\r\n            } else {\r\n                request.headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\r\n            }\r\n        }\r\n\r\n        let response: Response;\r\n        try {\r\n            response = await this._fetchType(request.url!, {\r\n                body: request.content,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method!,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        } catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(\r\n                LogLevel.Warning,\r\n                `Error from HTTP request. ${e}.`,\r\n            );\r\n            throw e;\r\n        } finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\") as string;\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n\r\n        return new HttpResponse(\r\n            response.status,\r\n            response.statusText,\r\n            payload,\r\n        );\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        let cookies: string = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\n\r\nfunction deserializeContent(response: Response, responseType?: XMLHttpRequestResponseType): Promise<string | ArrayBuffer> {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n\r\n    return content;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}